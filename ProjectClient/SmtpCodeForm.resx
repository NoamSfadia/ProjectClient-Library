<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIAAoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAQAAAAEAAAABAAA
        AAQAAAAEAAAABAAAAAMAAGYFAA/GMgAA1AYFD8QwABKRDgAAAAIAAAAFAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8BAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAP8BAAAAAAAZzAoACsLoIS7NUwMPyucABckrAAAAAAAA/wL///8BAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAgAAAAmAAAAIgAAACQAAAAjAAAAIwAAACQAAAAfAAAdKwAIn+sADMP/AAzD/QADZ0AAAAAaAAAGKgAA
        AAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAAAANzc3ZhwcHP8WFhb2FRUV+xcXF/sdHR35Gxsc+xcXFfgcHCH5AgWX/wADpPoABbr+ExMv+R0d
        FfYeHh//Q0NDagAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAAAD09PXlDQ0P/6urq+sTExP/Gxsb+ysrK/+Xl5f/k5OT/zMzK/9vb4P4rM7T+FB2q/hki
        rf6ur8P/39/a/vb29/o2Njb/Li4uXgAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>